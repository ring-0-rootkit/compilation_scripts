#!/bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' #no color

if [[ "$1" == "add" ]]; then
	echo "$(echo $(cat compileList.txt))" "$2" >compileList.txt
	exit 0
fi

if [[ "$1" == "clear" ]]; then
	if [ -e compileList.txt ];then
		rm compileList.txt
	fi
	touch compileList.txt
	exit 0
fi

if [[ "$1" == "help" ]]; then
	echo  add file.cpp   -----  link file.cpp with current code
	echo clear       -----     delete link queue
	echo -o outFolder/main.o  -----   save file to outFolder/main.o  ./outFolder/main.o
	echo main nas     -----     compile file main.cpp without adress sanitizer
	echo main r     -----     compile file main.cpp and run it after compiling
	echo help      -----     show this message
	exit 0
fi

if [[ "$2" == "-o" ]]; then
	out_folder="$3"
else
	out_folder=./bin/
	if ! [ -e "$out_folder" ]; then
		echo dirrectory "$out_folder" does not exist
		echo please create this directory or edit "$0"
		exit 0
	fi
	out_folder=./bin/"$1"
fi

# make cleanup function which prevent progress bar from not killing
function cleanup() {
  if [[ $pid != -1 ]];then
    printf "\033[2K\r"
    kill $pid
  fi
  echo
  exit 0
}

trap cleanup INT

# Start the progress bar in a subshell
(

  length=20
    direction=1
  position=2

  while :
  do
    # Build the progress bar string
    progress_bar=""
    for i in $(seq 2 $length); do
      if [ $i -eq $position ]; then
        progress_bar="$progress_bar<=>"
      else
        progress_bar="$progress_barÂ·"
      fi
    done

    # Clear the line and print the progress bar
    printf "\r\033[33m%s\033[0m" "[$progress_bar] Compiling"
    sleep 0.2

    # Update the position and direction
    if [ $position -eq $(($length)) ]; then
      direction=-1
    elif [ $position -eq 2 ]; then
      direction=1
    fi
    position=$(($position + $direction))
  done
) &

# Store the PID of the subshell
pid=$!

# Run the main program
if [[ "$2" == "nas" || "$3" == "nas" || "$5" == "nas" ]]; then
    if [ -s compileList.txt ];then
        g++ "$1".cpp $(more compileList.txt) -fdiagnostics-color -Wall -Wextra -Werror -pedantic -std=c++23 -o "$out_folder".o 2> /tmp/compilecpp.log
    else
        g++ "$1".cpp -fdiagnostics-color -Wall -Wextra -Werror -pedantic -std=c++23 -o "$out_folder".o 2>/tmp/compilecpp.log
    fi
else
    if [ -s compileList.txt ];then
        g++ "$1".cpp $(more compileList.txt) -fdiagnostics-color -Wall -Wextra -Werror -pedantic -fsanitize=address -std=c++23 -o "$out_folder".o 2>/tmp/compilecpp.log
    else
        g++ "$1".cpp -fdiagnostics-color -Wall -Wextra -Werror -pedantic -fsanitize=address -std=c++23 -o "$out_folder".o 2>/tmp/compilecpp.log
    fi
fi
#g++ "$1".cpp -Wall -Wextra -Werror -pedantic -std=c++23 -o "$out_folder" 2> /tmp/compilecpp.log

# Check the exit status of the main program
status=$?

# Kill the subshell if the main program finishes
if [[ $status -eq 0 || $status -eq 1 ]]; then
  printf "\033[2K\r"
  kill $pid
fi

pid=-1
#end of progress bar code


cat /tmp/compilecpp.log


if [ -s /tmp/compilecpp.log ]; then
	echo -e compilation ${RED}failed${NC}[${RED}-${NC}]
	rm /tmp/compilecpp.log
	exit 0
fi
echo -e compiled ${GREEN}successfully${NC}[${GREEN}+${NC}]
rm /tmp/compilecpp.log

if [[ "$2" == "r" || "$4" == "r" || "$3" == "r" ]]; then
	./"$out_folder".o
	echo
fi

